---
import { WORDS_PER_MINUTE } from '../consts';

interface Props {
  content: string;
}

const { content } = Astro.props;

// Improved reading time calculation
function calculateReadTime(text: string): number {
  if (!text || text.trim().length === 0) return 1;
  
  // Remove markdown syntax and HTML tags for more accurate word count
  const cleanText = text
    .replace(/```[\s\S]*?```/g, '') // Remove code blocks
    .replace(/`[^`]*`/g, '') // Remove inline code
    .replace(/<[^>]*>/g, '') // Remove HTML tags
    .replace(/#{1,6}\s/g, '') // Remove markdown headers
    .replace(/\*\*([^*]+)\*\*/g, '$1') // Remove bold markdown
    .replace(/\*([^*]+)\*/g, '$1') // Remove italic markdown
    .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // Remove links, keep text
    .replace(/!\[([^\]]*)\]\([^)]+\)/g, '') // Remove images
    .replace(/^\s*[-*+]\s+/gm, '') // Remove list markers
    .replace(/^\s*\d+\.\s+/gm, '') // Remove numbered list markers
    .trim();
  
  const words = cleanText.split(/\s+/).filter(word => word.length > 0).length;
  const readTime = Math.ceil(words / WORDS_PER_MINUTE);
  return Math.max(readTime, 1); // Minimum 1 minute
}

const readTime = calculateReadTime(content);
---

<div class="read-time">
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <circle cx="12" cy="12" r="10"></circle>
    <polyline points="12,6 12,12 16,14"></polyline>
  </svg>
  <span>{readTime} min read</span>
</div>

<style>
  .read-time {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: rgb(var(--gray));
    font-size: 0.9rem;
  }

  .read-time svg {
    opacity: 0.7;
  }
</style> 